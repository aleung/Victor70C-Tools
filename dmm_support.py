#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Mar 22, 2020 02:10:38 AM CST  platform: Windows NT
#    Mar 22, 2020 02:34:10 AM CST  platform: Windows NT
#    Mar 22, 2020 03:00:55 AM CST  platform: Windows NT
#    Mar 23, 2020 08:22:36 AM CST  platform: Windows NT

import sys

# my imports
import serial
import serial.tools.list_ports
import parse_victor70c as vic
import numpy as np
from matplotlib.lines import Line2D
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from datetime import datetime

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global combobox
    combobox = tk.StringVar()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    setupPorts()
    setupGraph()

def setupPorts():
    global ports_list
    ports_list = serial_ports()
    w.comboSerialPort['values'] = ports_list # get all the current serial ports
    w.comboSerialPort.current(0) # set the current to the first serial port
    global port
    port = ports_list[0].device
    print(f'selected port {port}')

def setupGraph():
    fig = Figure()
    t = np.arange(0,3,.01)
    fig.add_subplot(111).plot(t, 2 * np.sin(2*np.pi*t))
    w.Canvas1 = FigureCanvasTkAgg(fig, master=w.Canvas1)
    w.Canvas1.get_tk_widget().place(relheight = 1, relwidth = 1, bordermode='inside')
    w.Canvas1.draw()

global port 
port = ''
isConnected = False
global ser
ser = serial.Serial()
ser.baudrate = 2400
global series_datetime
series_datetime = []
global series_num
series_num = []

# ports = serial.tools.list_ports.comports()
# print([port.device for port in ports])

def serial_ports():    
    return serial.tools.list_ports.comports()

def updateSerial():
    if isConnected:
        global ser
        global series_datetime
        global series_num
        num = vic.parse_victor70c(ser.readline())
        numStr = str(num['NUM'])
        w.labelDisplay['text'] = numStr
        print(f'checking serial: {numStr} {datetime.now()}')
        series_datetime.append(datetime.now())
        series_num.append(num['NUM'])
        print(series_datetime)
        root.after(500, updateSerial)

def updateGraph():
    if isConnected:
        # fig.add_subplot(111).plot(t, 2 * np.sin(2*np.pi*t))
        # w.Canvas1 = FigureCanvasTkAgg(fig, master=w.Canvas1)
        # w.Canvas1.get_tk_widget().place(relheight = 1, relwidth = 1, bordermode='inside')
        # w.Canvas1.draw()
        pass

def btnRefresh_Click(p1):
    print('dmm_support.btnRefresh_Click')
    sys.stdout.flush()
    ports = serial_ports()
    w.comboSerialPort['values'] = ports
    w.comboSerialPort.current(0)

def comboSerialPort_Selected(p1):
    #print('dmm_support.comboSerialPort_Selected')
    sys.stdout.flush()

def btnStart_Click(p1):
    print('dmm_support.btnStart_Click')
    sys.stdout.flush()
    global ser
    if port != '':
        ser.port = port
        ser.open()
        w.frameSerialPort['text'] = f'Serial Port - connected {port}'
        print('Connected to:', ser.name)
        global isConnected
        isConnected = True
        updateSerial()
    else:
        print('No port selected')

def btnStop_Click(p1):
    print('dmm_support.btnStop_Click')
    sys.stdout.flush()
    global isConnected
    isConnected = False
    global ser
    ser.close()
    w.frameSerialPort['text'] = 'Serial Port - disconnected'
    w.labelDisplay['text'] = '0.000'
    print('serial port closed')

def ComboboxSelected(p1):
    # print('dmm_support.ComboboxSelected')
    index = w.comboSerialPort.current()
    global port 
    port = ports_list[index].device
    print(f'selected port {port}')
    sys.stdout.flush()

def destroy_window():
    # Function which closes the window.
    global ser
    ser.close() # close serial port before closing
    print('serial port closed')
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import dmm
    dmm.vp_start_gui()



