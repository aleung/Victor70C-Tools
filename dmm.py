#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Mar 23, 2020 01:27:24 PM CST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import dmm_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    dmm_support.set_Tk_var()
    top = Toplevel1 (root)
    dmm_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    dmm_support.set_Tk_var()
    top = Toplevel1 (w)
    dmm_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family {Roboto} -size 18"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("652x524+3284+435")
        top.minsize(148, 1)
        top.maxsize(4804, 1325)
        top.resizable(1, 1)
        top.title("Victor 70C Digital Multimeter")
        top.configure(background="#d9d9d9")

        self.frameSerialPort = tk.LabelFrame(top)
        self.frameSerialPort.place(relx=0.015, rely=0.0, relheight=0.181
                , relwidth=0.486)
        self.frameSerialPort.configure(relief='groove')
        self.frameSerialPort.configure(foreground="black")
        self.frameSerialPort.configure(text='''Serial Port - disconnected''')
        self.frameSerialPort.configure(background="#d9d9d9")

        self.btnRefresh = tk.Button(self.frameSerialPort)
        self.btnRefresh.place(relx=0.748, rely=0.368, height=33, width=61
                , bordermode='ignore')
        self.btnRefresh.configure(activebackground="#ececec")
        self.btnRefresh.configure(activeforeground="#000000")
        self.btnRefresh.configure(background="#d9d9d9")
        self.btnRefresh.configure(disabledforeground="#a3a3a3")
        self.btnRefresh.configure(foreground="#000000")
        self.btnRefresh.configure(highlightbackground="#d9d9d9")
        self.btnRefresh.configure(highlightcolor="black")
        self.btnRefresh.configure(pady="0")
        self.btnRefresh.configure(text='''Refresh''')
        self.btnRefresh.bind('<Button-1>',lambda e:dmm_support.btnRefresh_Click(e))

        self.comboSerialPort = ttk.Combobox(top)
        self.comboSerialPort.place(relx=0.034, rely=0.073, relheight=0.065
                , relwidth=0.314)
        self.value_list = []
        self.comboSerialPort.configure(values=self.value_list)
        self.comboSerialPort.configure(textvariable=dmm_support.combobox)
        self.comboSerialPort.configure(takefocus="")
        self.comboSerialPort.bind('<<ComboboxSelected>>',lambda e:dmm_support.ComboboxSelected(e))

        self.frameDisplay = tk.LabelFrame(top)
        self.frameDisplay.place(relx=0.52, rely=0.0, relheight=0.183
                , relwidth=0.456)
        self.frameDisplay.configure(relief='groove')
        self.frameDisplay.configure(foreground="black")
        self.frameDisplay.configure(text='''Victor 70C''')
        self.frameDisplay.configure(background="#d9d9d9")

        self.labelDisplay = tk.Label(self.frameDisplay)
        self.labelDisplay.place(relx=0.037, rely=0.271, height=58, width=97
                , bordermode='ignore')
        self.labelDisplay.configure(background="#d9d9d9")
        self.labelDisplay.configure(disabledforeground="#a3a3a3")
        self.labelDisplay.configure(font=font9)
        self.labelDisplay.configure(foreground="#000000")
        self.labelDisplay.configure(text='''0.000''')

        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(relx=0.015, rely=0.21, relheight=0.664
                , relwidth=0.959)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''Graph''')
        self.Labelframe2.configure(background="#d9d9d9")

        self.Canvas1 = tk.Canvas(self.Labelframe2)
        self.Canvas1.place(relx=0.016, rely=0.057, relheight=0.899
                , relwidth=0.963, bordermode='ignore')
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")

        self.btnStart = tk.Button(top)
        self.btnStart.place(relx=0.804, rely=0.067, height=33, width=43)
        self.btnStart.configure(activebackground="#ececec")
        self.btnStart.configure(activeforeground="#000000")
        self.btnStart.configure(background="#d9d9d9")
        self.btnStart.configure(disabledforeground="#a3a3a3")
        self.btnStart.configure(foreground="#000000")
        self.btnStart.configure(highlightbackground="#d9d9d9")
        self.btnStart.configure(highlightcolor="black")
        self.btnStart.configure(pady="0")
        self.btnStart.configure(text='''Start''')
        self.btnStart.bind('<Button-1>',lambda e:dmm_support.btnStart_Click(e))

        self.btnStop = tk.Button(top)
        self.btnStop.place(relx=0.891, rely=0.067, height=33, width=43)
        self.btnStop.configure(activebackground="#ececec")
        self.btnStop.configure(activeforeground="#000000")
        self.btnStop.configure(background="#d9d9d9")
        self.btnStop.configure(disabledforeground="#a3a3a3")
        self.btnStop.configure(foreground="#000000")
        self.btnStop.configure(highlightbackground="#d9d9d9")
        self.btnStop.configure(highlightcolor="black")
        self.btnStop.configure(pady="0")
        self.btnStop.configure(text='''Stop''')
        self.btnStop.bind('<Button-1>',lambda e:dmm_support.btnStop_Click(e))

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

if __name__ == '__main__':
    vp_start_gui()





